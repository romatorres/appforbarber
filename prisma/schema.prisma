generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============= MULTI-TENANT / FILIAIS =============

model Company {
  id        String   @id @default(cuid())
  name      String
  cnpj      String?  @unique
  email     String?
  phone     String?
  logo      String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  branches  Branch[]
  users     User[]

  @@map("company")
}

model Branch {
  id              String           @id @default(cuid())
  companyId       String
  company         Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name            String
  code            String // Código interno para identificação rápida
  address         String?
  city            String?
  state           String?
  zipCode         String?
  phone           String?
  email           String?
  active          Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  employees       Employee[]
  services        Service[]
  appointments    Appointment[]
  cashierClosings CashierClosing[]
  paymentMethods  PaymentMethod[]
  billCategories  BillCategory[]
  bills           Bill[]
  specialties     Specialty[]

  @@unique([companyId, code])
  @@index([companyId])
  @@map("branch")
}

// ============= USUÁRIOS E AUTENTICAÇÃO =============

model User {
  id             String           @id @default(cuid())
  companyId      String?
  company        Company?         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name           String
  email          String
  emailVerified  Boolean          @default(false)
  image          String?
  role           String           @default("USER") // SUPER_ADMIN, ADMIN, MANAGER, USER
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  sessions       Session[]
  accounts       Account[]
  employee       Employee?
  appointments   Appointment[]
  cashierClosing CashierClosing[]

  @@unique([email])
  @@index([companyId])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// ============= FUNCIONÁRIOS E SERVIÇOS =============

model Employee {
  id             String           @id @default(cuid())
  branchId       String
  branch         Branch           @relation(fields: [branchId], references: [id], onDelete: Cascade)
  userId         String?          @unique
  user           User?            @relation(fields: [userId], references: [id])
  name           String
  email          String
  appointments   Appointment[]
  services       Service[]
  commissions    Commission[]
  commissionRate Float            @default(50.0)
  specialties    String?
  bio            String?
  phoneNumber    String?
  startDate      DateTime         @default(now())
  status         String           @default("ACTIVE")
  serviceHistory ServiceHistory[]
  schedule       WorkSchedule[]
  specialty      Specialty[]

  @@index([branchId])
  @@map("employee")
}

model Service {
  id             String           @id @default(cuid())
  branchId       String
  branch         Branch           @relation(fields: [branchId], references: [id], onDelete: Cascade)
  name           String
  description    String
  duration       Int // in minutes
  price          Float
  active         Boolean          @default(true)
  employees      Employee[]
  appointments   Appointment[]
  serviceHistory ServiceHistory[]

  @@index([branchId])
  @@map("service")
}

model Appointment {
  id             String          @id @default(cuid())
  branchId       String
  branch         Branch          @relation(fields: [branchId], references: [id], onDelete: Cascade)
  date           DateTime
  status         String          @default("PENDING")
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  employeeId     String
  employee       Employee        @relation(fields: [employeeId], references: [id])
  serviceId      String
  service        Service         @relation(fields: [serviceId], references: [id])
  commission     Commission?
  voucher        Voucher?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  notes          String?
  serviceHistory ServiceHistory?

  @@index([branchId])
  @@index([date])
  @@map("appointment")
}

model Commission {
  id            String      @id @default(cuid())
  amount        Float
  date          DateTime    @default(now())
  employeeId    String
  employee      Employee    @relation(fields: [employeeId], references: [id])
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  @@map("commission")
}

model WorkSchedule {
  id         String   @id @default(cuid())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  dayOfWeek  Int // 0-6 (Sunday-Saturday)
  startTime  String // HH:mm format
  endTime    String // HH:mm format
  isWorking  Boolean  @default(true)

  @@unique([employeeId, dayOfWeek])
  @@map("work_schedule")
}

model ServiceHistory {
  id            String      @id @default(cuid())
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  serviceId     String
  service       Service     @relation(fields: [serviceId], references: [id])
  employeeId    String
  employee      Employee    @relation(fields: [employeeId], references: [id])
  date          DateTime
  price         Float
  commission    Float
  notes         String?
  rating        Int? // 1-5 star rating
  feedback      String? // Customer feedback
  createdAt     DateTime    @default(now())

  @@index([date])
  @@map("service_history")
}

// ============= PAGAMENTOS E FINANCEIRO =============

model PaymentMethod {
  id          String    @id @default(cuid())
  branchId    String
  branch      Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  name        String
  isActive    Boolean   @default(true)
  description String?
  payments    Payment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([branchId])
  @@map("payment_method")
}

model Voucher {
  id            String      @id @default(cuid())
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  code          String      @unique
  totalAmount   Float
  status        String      @default("PENDING") // PENDING, PAID, CANCELLED
  payment       Payment?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("voucher")
}

model Payment {
  id               String          @id @default(cuid())
  voucherId        String?         @unique
  voucher          Voucher?        @relation(fields: [voucherId], references: [id])
  bill             Bill?
  type             String          @default("INCOME")
  status           String          @default("COMPLETED")
  paymentMethodId  String
  paymentMethod    PaymentMethod   @relation(fields: [paymentMethodId], references: [id])
  amount           Float
  paidAt           DateTime?
  cashierClosingId String?
  cashierClosing   CashierClosing? @relation(fields: [cashierClosingId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([cashierClosingId])
  @@map("payment")
}

model Bill {
  id          String       @id @default(cuid())
  branchId    String
  branch      Branch       @relation(fields: [branchId], references: [id], onDelete: Cascade)
  description String
  amount      Float
  dueDate     DateTime
  status      String       @default("PENDING")
  categoryId  String
  category    BillCategory @relation(fields: [categoryId], references: [id])
  supplier    String?
  payment     Payment?     @relation(fields: [paymentId], references: [id])
  paymentId   String?      @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([branchId])
  @@index([dueDate])
  @@map("bill")
}

model BillCategory {
  id          String   @id @default(cuid())
  branchId    String
  branch      Branch   @relation(fields: [branchId], references: [id], onDelete: Cascade)
  name        String
  description String?
  bills       Bill[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([branchId, name])
  @@index([branchId])
  @@map("bill_category")
}

model CashierClosing {
  id               String    @id @default(cuid())
  branchId         String
  branch           Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  date             DateTime
  openingBalance   Float     @default(0)
  closingBalance   Float
  totalIncome      Float
  totalExpenses    Float
  totalCommissions Float
  observations     String?
  status           String    @default("OPEN")
  closedBy         String
  payments         Payment[]
  user             User      @relation(fields: [closedBy], references: [id])

  @@unique([branchId, date])
  @@index([branchId])
  @@index([date])
  @@map("cashier_closing")
}

model Specialty {
  id          String     @id @default(cuid())
  branchId    String
  branch      Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade)
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employees   Employee[]

  @@unique([branchId, name])
  @@index([branchId])
  @@map("specialty")
}
