generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  EMPLOYEE
  USER
}

// ============= COMPANY (MATRIZ) =============
model Company {
  id      String  @id @default(cuid())
  name    String
  cnpj    String? @unique
  email   String?
  phone   String?
  logo    String?
  address String?
  city    String?
  state   String?
  zipCode String?
  active  Boolean @default(true)

  // Limites baseados no plano atual
  maxBranches      Int @default(0) // 0 = só matriz, 1, 3, 5, -1 = ilimitado
  maxEmployees     Int @default(2) // 2, 5, 10, -1 = ilimitado
  currentBranches  Int @default(0) // Contador atual de filiais
  currentEmployees Int @default(0) // Contador atual de funcionários

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações
  users           User[]
  branches        Branch[]
  employees       Employee[]
  services        Service[] // Serviços GLOBAIS (visíveis para todas as unidades)
  appointments    Appointment[]
  cashierClosings CashierClosing[]
  paymentMethods  PaymentMethod[]
  billCategories  BillCategory[]
  bills           Bill[]
  specialties     Specialty[]
  subscription    Subscription?

  @@map("company")
}

// ============= SUBSCRIPTION (ASSINATURAS/PLANOS) =============
model Subscription {
  id        String  @id @default(cuid())
  companyId String  @unique
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Configuração do plano contratado
  planName String // Ex: "Pro 3 Filiais - 5 Funcionários"
  status   String @default("ACTIVE") // ACTIVE, CANCELLED, SUSPENDED, TRIAL

  // Limites contratados
  maxBranches  Int // 0, 1, 3, 5, -1 (ilimitado)
  maxEmployees Int // 2, 5, 10, -1 (ilimitado)

  // Pricing
  pricePerMonth Float
  billingCycle  String @default("MONTHLY") // MONTHLY, YEARLY

  // Datas
  startDate   DateTime  @default(now())
  endDate     DateTime?
  trialEndsAt DateTime? // Para período de teste

  autoRenew Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
  @@map("subscription")
}

// ============= BRANCH (FILIAIS - OPCIONAL) =============
model Branch {
  id        String   @id @default(cuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name      String
  code      String // Código único para identificar a filial (ex: FIL001, FIL002)
  address   String?
  city      String?
  state     String?
  zipCode   String?
  phone     String?
  email     String?
  managerId String? // Gerente responsável pela filial
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relações - dados SEGREGADOS por filial
  employees       Employee[] // Funcionários EXCLUSIVOS desta filial
  appointments    Appointment[] // Agendamentos desta filial
  cashierClosings CashierClosing[] // Caixa desta filial

  @@unique([companyId, code])
  @@index([companyId])
  @@map("branch")
}

// ============= USUÁRIOS E AUTENTICAÇÃO =============
model User {
  id                  String           @id @default(cuid())
  companyId           String?
  company             Company?         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name                String
  email               String           @unique
  emailVerified       Boolean          @default(false)
  image               String?
  role                Role             @default(USER)
  isTemporaryPassword Boolean          @default(false) // Flag para forçar mudança de senha
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @default(now()) @updatedAt
  sessions            Session[]
  accounts            Account[]
  employee            Employee?
  appointments        Appointment[]
  cashierClosings     CashierClosing[]

  @@index([companyId])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// ============= FUNCIONÁRIOS (EXCLUSIVOS POR UNIDADE) =============
model Employee {
  id        String  @id @default(cuid())
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // IMPORTANTE: Funcionário é EXCLUSIVO de uma unidade
  branchId String? // null = trabalha na MATRIZ, preenchido = trabalha em FILIAL específica
  branch   Branch? @relation(fields: [branchId], references: [id], onDelete: Cascade)

  userId      String? @unique
  user        User?   @relation(fields: [userId], references: [id])
  name        String
  email       String
  phoneNumber String?

  // Dados profissionais
  commissionRate Float    @default(50.0)
  specialties    String?
  bio            String?
  startDate      DateTime @default(now())
  status         String   @default("ACTIVE") // ACTIVE, INACTIVE, ON_LEAVE
  
  // Controle de acesso ao sistema
  hasSystemAccess Boolean @default(false) // Se o funcionário pode acessar o sistema

  // Relações
  appointments   Appointment[]
  services       Service[] // Serviços que este funcionário pode executar
  commissions    Commission[]
  serviceHistory ServiceHistory[]
  schedule       WorkSchedule[]
  specialty      Specialty[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
  @@index([branchId])
  @@map("employee")
}

// ============= SERVIÇOS (GLOBAIS - NÍVEL DA COMPANY) =============
model Service {
  id        String  @id @default(cuid())
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  name        String
  description String
  duration    Int // em minutos
  price       Float
  active      Boolean @default(true)

  // Serviços são GLOBAIS - visíveis para TODAS as unidades (matriz + filiais)
  // Mas podem ser executados por funcionários específicos de cada unidade

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employees      Employee[] // Funcionários habilitados para este serviço
  appointments   Appointment[]
  serviceHistory ServiceHistory[]

  @@index([companyId])
  @@index([active])
  @@map("service")
}

// ============= AGENDAMENTOS (INDIVIDUAIS POR UNIDADE) =============
model Appointment {
  id        String  @id @default(cuid())
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // IMPORTANTE: Agendamento é INDIVIDUAL por unidade
  branchId String? // null = agendamento na MATRIZ, preenchido = agendamento em FILIAL específica
  branch   Branch? @relation(fields: [branchId], references: [id], onDelete: SetNull)

  date   DateTime
  status String   @default("PENDING") // PENDING, CONFIRMED, COMPLETED, CANCELLED, NO_SHOW

  userId String
  user   User   @relation(fields: [userId], references: [id])

  employeeId String // Funcionário da unidade específica
  employee   Employee @relation(fields: [employeeId], references: [id])

  serviceId String // Serviço global
  service   Service @relation(fields: [serviceId], references: [id])

  commission     Commission?
  voucher        Voucher?
  serviceHistory ServiceHistory?

  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([companyId])
  @@index([branchId])
  @@index([employeeId])
  @@index([date])
  @@index([status])
  @@map("appointment")
}

model Commission {
  id            String      @id @default(cuid())
  amount        Float
  date          DateTime    @default(now())
  employeeId    String
  employee      Employee    @relation(fields: [employeeId], references: [id])
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  @@map("commission")
}

model WorkSchedule {
  id         String   @id @default(cuid())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  dayOfWeek  Int // 0-6 (Sunday-Saturday)
  startTime  String // HH:mm format
  endTime    String // HH:mm format
  isWorking  Boolean  @default(true)

  @@unique([employeeId, dayOfWeek])
  @@map("work_schedule")
}

model ServiceHistory {
  id            String      @id @default(cuid())
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  serviceId     String
  service       Service     @relation(fields: [serviceId], references: [id])
  employeeId    String
  employee      Employee    @relation(fields: [employeeId], references: [id])
  date          DateTime
  price         Float
  commission    Float
  notes         String?
  rating        Int? // 1-5 star rating
  feedback      String? // Customer feedback
  createdAt     DateTime    @default(now())

  @@index([employeeId])
  @@index([date])
  @@map("service_history")
}

// ============= PAGAMENTOS E FINANCEIRO (GLOBAIS) =============
model PaymentMethod {
  id          String    @id @default(cuid())
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name        String
  isActive    Boolean   @default(true)
  description String?
  payments    Payment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([companyId])
  @@map("payment_method")
}

model Voucher {
  id            String      @id @default(cuid())
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  code          String      @unique
  totalAmount   Float
  status        String      @default("PENDING") // PENDING, PAID, CANCELLED
  payment       Payment?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("voucher")
}

model Payment {
  id               String          @id @default(cuid())
  voucherId        String?         @unique
  voucher          Voucher?        @relation(fields: [voucherId], references: [id])
  bill             Bill?
  type             String          @default("INCOME") // INCOME, EXPENSE
  status           String          @default("COMPLETED")
  paymentMethodId  String
  paymentMethod    PaymentMethod   @relation(fields: [paymentMethodId], references: [id])
  amount           Float
  paidAt           DateTime?
  cashierClosingId String?
  cashierClosing   CashierClosing? @relation(fields: [cashierClosingId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([cashierClosingId])
  @@index([type])
  @@map("payment")
}

model Bill {
  id          String       @id @default(cuid())
  companyId   String
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  description String
  amount      Float
  dueDate     DateTime
  status      String       @default("PENDING") // PENDING, PAID, OVERDUE, CANCELLED
  categoryId  String
  category    BillCategory @relation(fields: [categoryId], references: [id])
  supplier    String?
  payment     Payment?     @relation(fields: [paymentId], references: [id])
  paymentId   String?      @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([companyId])
  @@index([dueDate])
  @@index([status])
  @@map("bill")
}

model BillCategory {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name        String
  description String?
  bills       Bill[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([companyId, name])
  @@index([companyId])
  @@map("bill_category")
}

// ============= FECHAMENTO DE CAIXA (CONSOLIDADO POR UNIDADE) =============
model CashierClosing {
  id        String  @id @default(cuid())
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // IMPORTANTE: Cada unidade tem seu próprio caixa
  branchId String? // null = caixa da MATRIZ, preenchido = caixa de FILIAL específica
  branch   Branch? @relation(fields: [branchId], references: [id], onDelete: SetNull)

  date             DateTime
  openingBalance   Float     @default(0)
  closingBalance   Float
  totalIncome      Float
  totalExpenses    Float
  totalCommissions Float
  observations     String?
  status           String    @default("OPEN") // OPEN, CLOSED
  closedBy         String
  closedAt         DateTime?
  payments         Payment[]
  user             User      @relation(fields: [closedBy], references: [id])

  @@unique([companyId, branchId, date])
  @@index([companyId])
  @@index([branchId])
  @@index([date])
  @@map("cashier_closing")
}

model Specialty {
  id          String     @id @default(cuid())
  companyId   String
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employees   Employee[]

  @@unique([companyId, name])
  @@index([companyId])
  @@map("specialty")
}
